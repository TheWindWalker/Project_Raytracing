#include <iostream>
#include "../FreeImage/FreeImage.h"
#include "SDL.h"

#define WIDTH 500
#define HEIGHT 500
#define BitsPerPixel 24

/** Initialise a SDL surface and return a pointer to it.
 *
 *  This function flips the FreeImage bitmap vertically to make it compatible
 *  with SDL's coordinate system.
 *
 */
SDL_Surface *get_sdl_surface(FIBITMAP *freeimage_bitmap) {

	// Loaded image is upside down, so flip it.
	FreeImage_FlipVertical(freeimage_bitmap);

	SDL_Surface *sdl_surface = SDL_CreateRGBSurfaceFrom(
		FreeImage_GetBits(freeimage_bitmap),
		FreeImage_GetWidth(freeimage_bitmap),
		FreeImage_GetHeight(freeimage_bitmap),
		FreeImage_GetBPP(freeimage_bitmap),
		FreeImage_GetPitch(freeimage_bitmap),
		FreeImage_GetRedMask(freeimage_bitmap),
		FreeImage_GetGreenMask(freeimage_bitmap),
		FreeImage_GetBlueMask(freeimage_bitmap),
		0
	);

	if (sdl_surface == NULL) {
		fprintf(stderr, "Failed to create surface: %s\n", SDL_GetError());
		exit(1);
	}

	return sdl_surface;
}

/** Initialise a SDL window and return a pointer to it. */
SDL_Window *get_sdl_window(int width, int height) {
	if (SDL_Init(SDL_INIT_VIDEO) < 0) {
		fprintf(stderr, "SDL couldn't initialise: %s.\n", SDL_GetError());
		exit(1);
	}

	SDL_Window *sdl_window;
	sdl_window = SDL_CreateWindow("Raytracing",
		SDL_WINDOWPOS_CENTERED,
		SDL_WINDOWPOS_CENTERED,
		width,
		height,
		SDL_WINDOW_BORDERLESS);

	return sdl_window;
}

/** Display the image by rendering the surface as a texture in the window. */
void render_image(SDL_Window *window, SDL_Surface *surface) {
	SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);
	if (renderer == NULL) {
		fprintf(stderr, "Failed to render: %s\n", SDL_GetError());
		exit(1);
	}

	SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
	if (texture == NULL) {
		fprintf(stderr, "Failed to load image\n");
		exit(1);
	}

	SDL_RenderClear(renderer);
	SDL_RenderCopy(renderer, texture, NULL, NULL);
	SDL_RenderPresent(renderer);
}

/* Loop until a key is pressed. */
void event_loop() {
	int keypressed = 0;
	SDL_Event e;
	while (!keypressed) {
		while (SDL_PollEvent(&e)) {
			if (e.type == SDL_KEYDOWN) {
				keypressed = 1;
			}
		}
	}
}
SDL_Surface *refresh_image(SDL_Window *window,FIBITMAP *freeimage_bitmap)
{
	//Assign the image to the surface
	SDL_Surface *sdl_surface = get_sdl_surface(freeimage_bitmap);
	//Render the image in the windows
	render_image(window, sdl_surface);
	return sdl_surface;
}
void render_windows()
{
	/*The bitmap will be generated by our software*/
	FIBITMAP *bitmap = FreeImage_Allocate(WIDTH, HEIGHT, BitsPerPixel);
	//Create a windows with the same width and height
	SDL_Window *sdl_window = get_sdl_window(WIDTH, HEIGHT);
	SDL_Surface *sdl_surface = refresh_image(sdl_window, bitmap);
	
	FreeImage_Save(FIF_PNG, bitmap, "export.png", 0);
	//Wait for a key press
	event_loop();

	//Unloading from memory and clean quit
	FreeImage_Unload(bitmap);
	SDL_FreeSurface(sdl_surface);
}
int main(int argc, char* argv[])
{
	render_windows(); // Affiche une fenêtre avec l'image générée (boucle attendant une pression sur une touche)
	return 0;
}